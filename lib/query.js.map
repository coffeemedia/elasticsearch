{"version":3,"file":"query.js","names":["and","queries","bool","must","filter","Boolean","or","should","term","field","value","matchAll","match_all","match","conditions","terms","array","range","nested","path","query","otherProps","ignore_unmapped","length","search","fields","multiMatch","queryString","trim","filterByWeight","weight","multi_match","type","operator","fuzziness","prefix_length","query_string"],"sources":["../src/query.js"],"sourcesContent":["export function and(...queries) { return { bool: { must: queries.filter(Boolean) } } }\nexport function or(...queries) { return { bool: { should: queries.filter(Boolean) } } }\nexport function term(field, value) { return { term: { [field]: value } } }\nexport function matchAll() { return { match_all: {} } }\nexport function match(conditions) { return { match: conditions } }\nexport function terms(field, array) { return { terms: { [field]: array } } }\nexport function range(field, conditions) { return { range: { [field]: { ...conditions } } } }\n\nexport function nested(path, query, otherProps) {\n  return {\n    nested: {\n      path,\n      ignore_unmapped: true,\n      query,\n      ...otherProps\n    }\n  }\n}\n\nexport function filter(...queries) {\n  const filter = queries.filter(Boolean)\n  return Boolean(filter.length) && { bool: { filter } }\n}\n\nexport function search(fields, query) {\n  return or(\n    multiMatch(fields, query),\n    queryString(fields, `*${query.trim()}*`), // trimming to prevent weird Elasticsearch behaviour\n  )\n}\n\nexport function filterByWeight(query, { weight }) {\n  return { filter: query, weight }\n}\n\nfunction multiMatch(fields, query) {\n  return {\n    multi_match: {\n      query,\n      fields,\n      type: 'most_fields',\n      operator: 'and',\n      fuzziness: 'AUTO',\n      prefix_length: 2\n    }\n  }\n}\n\nfunction queryString(fields, query) {\n  return {\n    query_string: {\n      fields,\n      query\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,GAAT,GAAyB;EAAA,kCAATC,OAAS;IAATA,OAAS;EAAA;;EAAE,OAAO;IAAEC,IAAI,EAAE;MAAEC,IAAI,EAAEF,OAAO,CAACG,MAAR,CAAeC,OAAf;IAAR;EAAR,CAAP;AAAoD;;AAC/E,SAASC,EAAT,GAAwB;EAAA,mCAATL,OAAS;IAATA,OAAS;EAAA;;EAAE,OAAO;IAAEC,IAAI,EAAE;MAAEK,MAAM,EAAEN,OAAO,CAACG,MAAR,CAAeC,OAAf;IAAV;EAAR,CAAP;AAAsD;;AAChF,SAASG,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4B;EAAE,OAAO;IAAEF,IAAI,EAAE;MAAE,CAACC,KAAD,GAASC;IAAX;EAAR,CAAP;AAAqC;;AACnE,SAASC,QAAT,GAAoB;EAAE,OAAO;IAAEC,SAAS,EAAE;EAAb,CAAP;AAA0B;;AAChD,SAASC,KAAT,CAAeC,UAAf,EAA2B;EAAE,OAAO;IAAED,KAAK,EAAEC;EAAT,CAAP;AAA8B;;AAC3D,SAASC,KAAT,CAAeN,KAAf,EAAsBO,KAAtB,EAA6B;EAAE,OAAO;IAAED,KAAK,EAAE;MAAE,CAACN,KAAD,GAASO;IAAX;EAAT,CAAP;AAAsC;;AACrE,SAASC,KAAT,CAAeR,KAAf,EAAsBK,UAAtB,EAAkC;EAAE,OAAO;IAAEG,KAAK,EAAE;MAAE,CAACR,KAAD,qBAAcK,UAAd;IAAF;EAAT,CAAP;AAAkD;;AAEtF,SAASI,MAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyC;EAC9C,OAAO;IACLH,MAAM;MACJC,IADI;MAEJG,eAAe,EAAE,IAFb;MAGJF;IAHI,GAIDC,UAJC;EADD,CAAP;AAQD;;AAEM,SAASjB,MAAT,GAA4B;EAAA,mCAATH,OAAS;IAATA,OAAS;EAAA;;EACjC,IAAMG,MAAM,GAAGH,OAAO,CAACG,MAAR,CAAeC,OAAf,CAAf;EACA,OAAOA,OAAO,CAACD,MAAM,CAACmB,MAAR,CAAP,IAA0B;IAAErB,IAAI,EAAE;MAAEE;IAAF;EAAR,CAAjC;AACD;;AAEM,SAASoB,MAAT,CAAgBC,MAAhB,EAAwBL,KAAxB,EAA+B;EACpC,OAAOd,EAAE,CACPoB,UAAU,CAACD,MAAD,EAASL,KAAT,CADH,EAEPO,WAAW,CAACF,MAAD,aAAaL,KAAK,CAACQ,IAAN,EAAb,OAFJ,CAEmC;EAFnC,CAAT;AAID;;AAEM,SAASC,cAAT,CAAwBT,KAAxB,QAA2C;EAAA,IAAVU,MAAU,QAAVA,MAAU;EAChD,OAAO;IAAE1B,MAAM,EAAEgB,KAAV;IAAiBU;EAAjB,CAAP;AACD;;AAED,SAASJ,UAAT,CAAoBD,MAApB,EAA4BL,KAA5B,EAAmC;EACjC,OAAO;IACLW,WAAW,EAAE;MACXX,KADW;MAEXK,MAFW;MAGXO,IAAI,EAAE,aAHK;MAIXC,QAAQ,EAAE,KAJC;MAKXC,SAAS,EAAE,MALA;MAMXC,aAAa,EAAE;IANJ;EADR,CAAP;AAUD;;AAED,SAASR,WAAT,CAAqBF,MAArB,EAA6BL,KAA7B,EAAoC;EAClC,OAAO;IACLgB,YAAY,EAAE;MACZX,MADY;MAEZL;IAFY;EADT,CAAP;AAMD"}